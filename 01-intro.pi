################################################################################
### UTILITIES
################################################################################
def create_metronome
  live_loop :metronome do
    sample :elec_tick, amp: 0.5
    sleep 1
  end
end

def create_metronome_subticks
  live_loop :metronome_subticks do
    sample :elec_tick, amp: 0.1
    sleep 0.25
  end
end

def create_beat_counter
  sleep BAR
  live_loop :count_beat do
    sample "/Users/tobiasbraner/dev/sonic-pi-stuff/samples/count-up-8-bars.wav", amp: 0.5
    sleep 4 * 8
  end
end

def my_pattern(pattern, sample_name, amp = 1.0)
  pattern.length.times do |i|
    amp_value = if amp.is_a?(Float) || amp.is_a?(Integer) then amp else amp.tick end
    sample sample_name, amp: amp_value if pattern[i] == "x"
    sleep 0.25
  end
end

def my_pattern_with_index(pattern, samples, amp = 1.0)
  pattern.length.times do |i|
    amp_value = if amp.is_a?(Float) || amp.is_a?(Integer) then amp else amp.tick end
    if (pattern[i] != ".")
      sample samples[pattern[i].to_i], amp: amp_value
    end
    sleep 0.25
  end
end

################################################################################
### TRACK
################################################################################
BAR = 4
use_bpm 132

patterns = {
  bd: "x..." * 4,
  ch: "xx.x" * 4,
  oh: "..x." * 4,
}

# with_fx :lpf, cutoff: 130, cutoff_slide: BAR do |lpf|
with_fx :level, amp: 0.5 do
  with_fx :compressor do

    # create_metronome
    # create_metronome_subticks

    live_loop :bar do sleep BAR end
    live_loop :bar2 do (sleep 2 * BAR) end
    live_loop :bar3 do (sleep 3 * BAR) end
    live_loop :bar4 do (sleep 4 * BAR) end
    live_loop :bar5 do (sleep 5 * BAR) end
    live_loop :bar6 do (sleep 6 * BAR) end
    live_loop :bar7 do (sleep 7 * BAR) end
    live_loop :bar8 do (sleep 8 * BAR) end

    # live_loop :setvalues do
    #   control lpf, cutoff: rrand(20, 130)
    #   sleep 0.25
    # end

    live_loop :bd do |i|
      sync :bar

      if (i + 1) % 4 != 0
        my_pattern(patterns[:bd], :bd_klub)
      end

      i += 1
    end

    live_loop :ch do
      sync :bar
      amp = (ring 0.4, 0.2, 0.0, 0.3)
      my_pattern(patterns[:ch], :drum_cymbal_closed, amp)
    end

    live_loop :oh do
      sync :bar
      amp = (ring 0.3, 0.6)
      my_pattern(patterns[:oh], :drum_cymbal_soft, amp)
    end

    live_loop :fill_1 do
      sync :bar4
      my_pattern("x..." * 3 + "x.x.", :drum_snare_soft)
    end

    live_loop :fill_2 do
      sync :bar8
      amp = (ring 0.5, 0.1)
      my_pattern_with_index("01" * 6 + "0121", [:drum_cymbal_pedal, :drum_snare_soft, :drum_splash_hard], amp)
    end

    create_beat_counter
  end
end
# end
